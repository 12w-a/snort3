Snort 3.0 is an updated version of the Snort Intrusion Prevention System
(IPS) which features a new design that provides a superset of 2.9
functionality with better throughput, detection, scalability, and usability.
Some of the key features of Snort 3.0 are:

* Support multiple packet processing threads
* Use a shared configuration and attribute table
* Autodetect services for portless configuration
* Modular design
* Plugin framework with over 200 plugins
* More scalable memory profile
* LuaJIT configuration, loggers, and rule options
* Hyperscan support
* Rewritten TCP handling
* New rule parser and syntax
* Service rules like alert http
* Rule "sticky" buffers
* Way better SO rules
* New HTTP inspector
* New performance monitor
* New time and space profiling
* New latency monitoring and enforcement
* Piglets to facilitate component testing
* Inspection Events
* Automake and Cmake
* Autogenerate reference documentation

Additional are already under development:

* Use a shared network map
* Support hardware offload for fast pattern acceleration
* Provide support for DPDK and ODP
* Support pipelining of packet processing
* Support proxy mode
* Multi-tennant support
* Incremental reload
* New serialization of perf data and events
* Enhanced rule processing
* Windows support
* Anomaly detection
* and more!

The remainder of this section provides some background and overview
information.  The next section describes how to use the major features of
Snort.  Most of the rest of the manual is reference material.

The 2.X Snort manual may be useful only for some background information not
yet documented here.


=== Background

Snort is a signature-based IPS, which means that as it receives network
packets it reassembles and normalizes the content so that a set of rules can
be evaluated to detect the presence of any significant conditions that
merit further action.  A rough processing flow is as follows:

////
(pkt) -> [decode] -> [preprocess] -> [detect] -> [log] -> (verdict)
////
image::snort2x.png["Snort 2X",width="480"]

The steps are:

1.  Decode each packet to determine the basic network characteristics such
as source and destination addresses and ports.  A typical packet might have
ethernet containing IP containing TCP containing HTTP (ie eth:ip:tcp:http).
The various encapsulating protocols are examined for sanity and anomalies
as the packet is decoded.  This is essentially a stateless effort.

2.  Preprocess each decoded packet using accumulated state to determine the
purpose and content of the innermost message.  This step may involve
reordering and reassembling IP fragments and TCP segments to produce the
original application protocol data unit (PDU).  Such PDUs are analyzed and
normalized as needed to support further processing.

3.  Detection is a two step process.  For efficiency, most rules contain a
specific content pattern that can be searched for such that if no match is
found no further processing is necessary.  Upon start up, the rules are
compiled into pattern groups such that a single, parallel search can be
done for all patterns in the group.  If any match is found, the full rule
is examined according to the specifics of the signature.

4.  The logging step is where Snort saves any pertinent information
resulting from the earlier steps.  More generally, this is where other
actions can be taken as well such as blocking the packet.


==== Snort 2.X Processing

The preprocess step in Snort 2.X is highly configurable.  Arbitrary
preprocessors can be loaded dynamically at startup, configured in
snort.conf, and then executed at runtime.  Basically, the preprocessors are
put into a list which is iterated for each packet.  Recent versions have
tweaked the list handling some, but the same basic architecture has allowed
Snort to grow from a sniffer, with no preprocessing, to a full-fledged IPS,
with lots of preprocessing.

While this "list of plugins" approach has considerable flexibility, it
hampers future development when the flow of data from one preprocessor to
the next depends on traffic conditions, a common situation with advanced
features like application identification.  In this case, a preprocessor
like HTTP may be extracting and normalizing data that ultimately is not
used, or appID may be repeatedly checking for data that is just not
available.

Callbacks help break out of the preprocess straightjacket.  This is where
one preprocessor supplies another with a function to call when certain data
is available.  Snort has started to take this approach to pass some HTTP and
SIP preprocessor data to appID.  However, it remains a peripheral feature
and still requires the production of data that may not be consumed.


==== Snort 3.0 Processing

One of the goals of Snort++ is to provide a more flexible framework for
packet processing by implementing an event-driven approach.  Another is to
produce data only when needed to minimize expensive normalizations.
However, the basic packet processing provides very similar functionality.

The basic processing steps Snort\++ takes are similar to Snort's as seen in
the following diagram.  The preprocess step employs specific inspector
types instead of a generalized list, but the basic procedure includes
stateless packet decoding, TCP stream reassembly, and service specific
analysis in both cases.  (Snort++ provides hooks for arbitrary inspectors,
but they are not central to basic flow processing and are not shown.)

////
(pkt) -> [decode] -> [stream] -> [service] -> [detect] -> [log] -> (verdict)
         -----------------------------------------------------
                      [appid]   [firewall]   [other]
////
image::snort3x.png["Snort 3X",width="480"]

However, Snort++ also provides a more flexible mechanism than callback
functions.  By using inspection events, it is possible for an inspector to
supply data that other inspectors can process.  This is known as the
observer pattern or publish-subscribe pattern.

Note that the data is not actually published.  Instead, access to the data
is published, and that means that subscribers can access the raw or
normalized version(s) as needed.  Normalizations are done only on the first
access, and subsequent accesses get the previously normalized data.  This
results in just in time (JIT) processing.

A basic example of this in action is provided by the extra data_log plugin.
It is a passive inspector, ie it does nothing until it receives the data it
subscribed for ('other' in the above diagram).  By adding data_log = { key
= 'http_raw_uri' } to your snort.lua configuration, you will get a simple
URI logger.

Inspection events coupled with pluggable inspectors provide a very flexible
framework for implementing new features.  And JIT buffer stuffers allow
Snort\++ to work smarter, not harder.  These capabilities will be leveraged
more and more as Snort++ development continues.


=== Configuration

Effective configuration of Snort++ is done via the environment, command
line, a Lua configruation file, and a rules file.

Note that backwards compatibility was sacrificed to obtain new and improved
functionality.  While Snort\++ leverages some of the Snort code base, a lot
has changed.  The configuration of Snort++ is done with Lua, so your old
conf won't work as is.  Rules are still text based but with syntax tweaks,
so your 2.X rules must be fixed up.  However, snort2lua will help you
convert your conf and rules to the new format.

==== Environment

LUA_PATH must be set based on your install:

    LUA_PATH=$install_prefix/include/snort/lua/\?.lua\;\;

SNORT_LUA_PATH must be set to load auxillary configuration files if you use
the default snort.lua.  For example:

    export SNORT_LUA_PATH=$install_prefix/etc/snort

==== Command Line

A simple command line might look like this:

    snort -c snort.lua -R cool.rules -r some.pcap -A cmg

To understand what that does, you can start by just running snort with no
arguments by running snort --help.  Help for all configuration and rule
options is available via a suitable command line.  In this case:

-c snort.lua is the main configuration file.  This is a Lua script that is
executed when loaded.

-R cool.rules contains some detection rules.  You can write your own or
obtain them from Talos (native 3.0 rules are not yet available from Talos
so you must convert them with snort2lua).  You can also put your rules
directly in your configuration file.

-r some.pcap tells Snort to read network traffic from the given packet
capture file.  You could instead use -i eth0 to read from a live interface.
There many other options available too depending on the DAQ you use.

-A cmg says to output intrusion events in "cmg" format, which has basic
header details followed by the payload in hex and text.

Note that you add to and/or override anything in your configuration file by
using the --lua command line option.  For example:

    --lua 'ips = { enable_builtin_rules = true }'

will load the built-in decoder and inspector rules.  In this case, ips is
overwritten with the config you see above.  If you just want to change the
config given in your configuration file you would do it like this:

    --lua 'ips.enable_builtin_rules = true'

==== Configuration File

The configuration file gives you complete control over how Snort processes
packets.  Start with the default snort.lua included in the distribution
because that contains some key ingredients.  Note that most of the
configurations look like:

    stream = { }

This means enable the stream module using internal defaults.  To see what
those are, you could run:

    snort --help-config stream

Snort++ is organized into a collection of builtin and plugin modules.
If a module has parameters, it is configured by a Lua table of the same
name.  For example, we can see what the active module has to offer with
this command:

    $ snort --help-module active

    What: configure responses

    Type: basic

    Configuration:

    int active.attempts = 0: number of TCP packets sent per response (with
    varying sequence numbers) { 0:20 }

    string active.device: use 'ip' for network layer responses or 'eth0' etc
    for link layer

    string active.dst_mac: use format '01:23:45:67:89:ab'

    int active.max_responses = 0: maximum number of responses { 0: }

    int active.min_interval = 255: minimum number of seconds between
    responses { 1: }

This says active is a basic module that has several parameters.  For each,
you will see:

    type module.name = default: help { range }

For example, the active module has a max_responses parameter that takes
non-negative integer values and defaults to zero.  We can change that in
Lua as follows:

    active = { max_responses = 1 }

or:

    active = { }
    active.max_responses = 1

If we also wanted to limit retries to at least 5 seconds, we could do:

    active = { max_responses = 1, min_interval = 5 }

==== Rules

Rules tell Snort how to detect interesting conditions, such as an attack,
and what to do when the condition is detected.  Here is an example rule:

    alert tcp any any -> 192.168.1.1 80 ( msg:"A ha!"; content:"attack"; sid:1; )

The structure is:

    action proto source dir dest ( body )

Where:

action - tells Snort what to do when a rule "fires", ie when the signature
matches.  In this case Snort will log the event.  It can also do thing like
block the flow when running inline.

proto - tells Snort what protocol applies.  This may be ip, icmp, tcp, udp,
http, etc.

source - specifies the sending IP address and port, either of which can be
the keyword any, which is a wildcard.

dir - must be either unidirectional as above or bidirectional indicated by
<>.

dest - similar to source but indicates the receiving end.

body - detection and other information contained in parenthesis.

There are many rule options available to construct as sophisticated a
signature as needed.  In this case we are simply looking for the "attack"
in any TCP packet.  A better rule might look like this:

    alert http
    (
        msg:"Gotcha!";
        flow:established, to_server;
        http_uri:"attack";
        sid:2;
    )

For details on these and other options, see the reference section.

==== Converting Your 2.X Configuration

If you have a working 2.X configuration snort2lua makes it easy to get up
and running with Snort++.  This tool will convert your configuration and/or
rules files automatically.  You will want to clean up the results and
double check that it is doing exactly what you need.

    snort2lua -c snort.conf

The above command will generate snort.lua based on your 2.X configuration.
For more information and options for more sophisticated use cases, see the
Snort2Lua section later in the manual.

=== Plugins and Scripts

There are several plugin types:

* Codec - to decode and encode packets
* Inspector - like the prior preprocessors, for normalization, etc.
* IpsOption - for detection in Snort++ IPS rules
* IpsAction - for custom rule actions
* Logger - for handling events
* Mpse - for fast pattern matching
* So - for dynamic rules

Most plugins can be built statically or dynamically.  By default they are
all static.  There is no difference in functionality between static or
dynamic plugins but the dynamic build generates a slightly lighter weight
binary.  Either way you can add dynamic plugins with --plugin-path and
newer versions will replace older versions, even when built statically.

The power of plugins is that they have a very focused purpose and can be
created with relative ease.  For example, you can extend the rule language
by writing your own IpsOption and it will plug in and function just like
existing options.  The extra directory has examples of each type of plugin.

Some things just need to be tweaked or prototyped quickly.  In addition to
the Lua conf, which is a script that can contain functions to compute
settings, etc., you can also script Loggers and IpsOptions.

